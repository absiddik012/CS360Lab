Q4. Create a SavingsAccount class. Use a static data member annual-InterestRate to store the annual interest rate for each of the savers. Each member of the class contains a private data member savingsBalance indicating the amount the saver currently has on deposit. Provide member function calculateMonthlyInterest that calculates the monthly interest by multiplying the savingsBalance by annualInterestRate divided by 12; this interest should be added to savingsBalance. Provide a static member function modifyInterestRate that sets the static annualInterestRate to a new value. Write a driver program to test class SavingsAccount. Instantiate two different objects of class SavingsAccount, saver1 and saver2, with balances of $2000.00 and $3000.00,
respectively. Set the annualInterestRate to 3 percent. Then calculate the monthly interest and print the new balances for each of the savers. Then set the annualInterestRate to 4 percent, calculate the next month's interest and print the new balances for each of the savers.



Ans: 
#include <iostream>
#include <iomanip> // For std::setprecision

using namespace std;

class SavingsAccount {
public:
    SavingsAccount(double balance) : savingsBalance(balance) {}

    // Calculate and add monthly interest to the savings balance
    void calculateMonthlyInterest() {
        double monthlyInterest = (savingsBalance * annualInterestRate) / 12.0;
        savingsBalance += monthlyInterest;
    }

    // Modify the annual interest rate
    static void modifyInterestRate(double newInterestRate) {
        annualInterestRate = newInterestRate / 100.0; // Converting percentage to decimal
    }

    // Print the current balance of the account
    void printBalance() const {
        cout << fixed << setprecision(2) << "$" << savingsBalance << endl;
    }

private:
    double savingsBalance;
    static double annualInterestRate; // Static data member
};

double SavingsAccount::annualInterestRate = 0.0;

int main() {
    SavingsAccount saver1(2000.00), saver2(3000.00);

    // Set annual interest rate to 3%
    SavingsAccount::modifyInterestRate(3.0);
    cout << "Initial Balances:\n";
    cout << "Saver 1: ";
    saver1.printBalance();
    cout << "Saver 2: ";
    saver2.printBalance();
    
    // Calculate this month's interest and print new balances
    cout << "\nBalances after applying one month's interest at 3% annual rate:\n";
    saver1.calculateMonthlyInterest();
    saver2.calculateMonthlyInterest();
    cout << "Saver 1: ";
    saver1.printBalance();
    cout << "Saver 2: ";
    saver2.printBalance();

    // Change the interest rate to 4% and calculate next month's interest
    SavingsAccount::modifyInterestRate(4.0);
    cout << "\nBalances after applying one month's interest at 4% annual rate:\n";
    saver1.calculateMonthlyInterest();
    saver2.calculateMonthlyInterest();
    cout << "Saver 1: ";
    saver1.printBalance();
    cout << "Saver 2: ";
    saver2.printBalance();

    return 0;
}
