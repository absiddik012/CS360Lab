Q1. Consider class Complex shown as follows. The class enables operations on so-called
complex numbers. These are numbers of the form realPart + imaginaryPart*i, where I has the value √―1.
a. Modify the class to enable input and output of complex numbers via overloaded >> and << operators, respectively (you should remove the print function from the class).

b. Overload the multiplication operator to enable multiplication of two complex numbers as in algebra.

c. Overload the == and != operators to allow comparisons of complex numbers.

// Complex.h
// Complex class definition.
#ifndef COMPLEX_H
#define COMPLEX_H
class Complex{
public:
explicit Complex( double = 0.0, double = 0.0 ); // constructor
Complex operator+( const Complex & ) const; // addition
Complex operator-( const Complex & ) const; // subtraction
void print() const; // output
private:
double real; // real part
double imaginary; // imaginary part
}; // end class Complex
#endif
// Complex.cpp
// Complex class member-function definitions.
#include <iostream>
#include "Complex.h" // Complex class definition
using namespace std;
// Constructor
Complex::Complex( double realPart, double imaginaryPart ):
real( realPart ),imaginary( imaginaryPart ){
// empty body
} // end Complex constructor
// addition operator
Complex Complex::operator+( const Complex &operand2 ) const{
return Complex( real + operand2.real,imaginary +
operand2.imaginary );
} // end function operator+
// subtraction operator
Complex Complex::operator-( const Complex &operand2 ) const{
return Complex( real - operand2.real,imaginary - operand2.imaginary );
} // end function operator-
// display a Complex object in the form: (a, b)
void Complex::print() const{
cout << '(' << real << ", " << imaginary << ')';
} // end function print
// main.cpp
// Complex class test program.
#include <iostream>
#include "Complex.h"
using namespace std;
int main(void){
Complex x;
Complex y( 4.3, 8.2 );
Complex z( 3.3, 1.1 );
cout << "x: ";
x.print();
cout << "\ny: ";
y.print();
cout << "\nz: ";
z.print();
x = y + z;
cout << "\n\nx = y + z:" << endl;
x.print();
cout << " = ";
y.print();
cout << " + ";
z.print();
x = y - z;
cout << "\n\nx = y - z:" << endl;
x.print();
cout << " = ";
y.print();
cout << " - ";
z.print();
cout << endl;
} // end main





Ans:
#ifndef COMPLEX_H
#define COMPLEX_H

#include <iostream>

class Complex {
public:
    explicit Complex(double real = 0.0, double imaginary = 0.0);
    friend std::ostream& operator<<(std::ostream& out, const Complex& c);
    friend std::istream& operator>>(std::istream& in, Complex& c);
    Complex operator+(const Complex& operand2) const;
    Complex operator-(const Complex& operand2) const;
    Complex operator*(const Complex& operand2) const;
    bool operator==(const Complex& operand2) const;
    bool operator!=(const Complex& operand2) const;

private:
    double real;      // Real part
    double imaginary; // Imaginary part
};

#endif

//#include "Complex.h"

Complex::Complex(double realPart, double imaginaryPart)
    : real(realPart), imaginary(imaginaryPart) {}

std::ostream& operator<<(std::ostream& out, const Complex& c) {
    out << '(' << c.real << ", " << c.imaginary << ')';
    return out;
}

std::istream& operator>>(std::istream& in, Complex& c) {
    std::cout << "Enter real part: ";
    in >> c.real;
    std::cout << "Enter imaginary part: ";
    in >> c.imaginary;
    return in;
}

Complex Complex::operator+(const Complex& operand2) const {
    return Complex(real + operand2.real, imaginary + operand2.imaginary);
}

Complex Complex::operator-(const Complex& operand2) const {
    return Complex(real - operand2.real, imaginary - operand2.imaginary);
}

Complex Complex::operator*(const Complex& operand2) const {
    return Complex(real * operand2.real - imaginary * operand2.imaginary,
                   real * operand2.imaginary + imaginary * operand2.real);
}

bool Complex::operator==(const Complex& operand2) const {
    return (real == operand2.real) && (imaginary == operand2.imaginary);
}

bool Complex::operator!=(const Complex& operand2) const {
    return !(*this == operand2);
}

#include <iostream>
//#include "Complex.h"

using namespace std;

int main() {
    Complex x, y, result;
    cout << "Enter complex number x:" << endl;
    cin >> x;
    cout << "Enter complex number y:" << endl;
    cin >> y;

    cout << "x: " << x << "\ny: " << y << endl;

    result = x + y;
    cout << "x + y = " << result << endl;

    result = x - y;
    cout << "x - y = " << result << endl;

    result = x * y;
    cout << "x * y = " << result << endl;

    cout << "x == y? " << (x == y ? "True" : "False") << endl;
    cout << "x != y? " << (x != y ? "True" : "False") << endl;

    return 0;
}
