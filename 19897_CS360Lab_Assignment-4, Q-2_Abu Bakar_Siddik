Q2. Generate a class called Rational to perform arithmetic with fractions. Write a program to test your class. Use integer variables to represent the private data of the class—the numerator and the denominator. Provide a constructor that enables an object of this class to be initialized when it’s declared. The constructor should contain default values in case no initializers are provided and should store the fraction in reduced form. For example, 2/4, the fraction would be stored in the object as 1 in the numerator and 2 in the denominator. Provide public member functions that perform each of the following tasks:

a. Adding two Rational numbers. The result should be stored in reduced form.
b. Subtracting two Rational numbers. The result should be stored in reduced
form.
c. Multiplying two Rational numbers. The result should be stored in reduced
form.
d. Dividing two Rational numbers. The result should be stored in reduced form.
e. Printing Rational numbers in the form a/b, where a is the numerator and b is
the denominator.
f. Printing Rational numbers in floating-point format.


Ans:
#include <iostream>
using namespace std;

class Rational {
public:
    // Constructor with default values
    Rational(int numerator = 0, int denominator = 1) {
        this->numerator = numerator;
        this->denominator = denominator;
        reduce();
    }

    // Addition of two Rational numbers
    Rational add(const Rational& rhs) const {
        return Rational(numerator * rhs.denominator + rhs.numerator * denominator, denominator * rhs.denominator);
    }

    // Subtraction of two Rational numbers
    Rational subtract(const Rational& rhs) const {
        return Rational(numerator * rhs.denominator - rhs.numerator * denominator, denominator * rhs.denominator);
    }

    // Multiplication of two Rational numbers
    Rational multiply(const Rational& rhs) const {
        return Rational(numerator * rhs.numerator, denominator * rhs.denominator);
    }

    // Division of two Rational numbers
    Rational divide(const Rational& rhs) const {
        return Rational(numerator * rhs.denominator, denominator * rhs.numerator);
    }

    // Print Rational number in a/b form
    void print() const {
        cout << numerator << "/" << denominator;
    }

    // Print Rational number in floating-point format
    void printFloat() const {
        cout << static_cast<double>(numerator) / denominator;
    }

private:
    int numerator;
    int denominator;

    // Reduce the fraction to its simplest form
    void reduce() {
        int gcdValue = gcd(abs(numerator), abs(denominator)); // Use abs to ensure positive GCD
        numerator /= gcdValue;
        denominator /= gcdValue;
    }

    // Compute the greatest common divisor (Euclidean algorithm)
    static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
};
int main() {
    Rational r1(2, 3);
    Rational r2(3, 4);

    cout << "R1: ";
    r1.print();
    cout << ", Float: ";
    r1.printFloat();
    cout << endl;

    cout << "R2: ";
    r2.print();
    cout << ", Float: ";
    r2.printFloat();
    cout << endl;

    Rational sum = r1.add(r2);
    cout << "Sum: ";
    sum.print();
    cout << ", Float: ";
    sum.printFloat();
    cout << endl;

    Rational difference = r1.subtract(r2);
    cout << "Difference: ";
    difference.print();
    cout << ", Float: ";
    difference.printFloat();
    cout << endl;

    Rational product = r1.multiply(r2);
    cout << "Product: ";
    product.print();
    cout << ", Float: ";
    product.printFloat();
    cout << endl;

    Rational quotient = r1.divide(r2);
    cout << "Quotient: ";
    quotient.print();
    cout << ", Float: ";
    quotient.printFloat();
    cout << endl;
    return 0;
}
